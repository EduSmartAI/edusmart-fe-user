/**
 * File n√†y ch·ª©a c√°c h√†m g·ªçi API t·ª´ ph√≠a CLIENT (browser)
 * L∆∞u √Ω: Hi·ªán t·∫°i g·∫∑p v·∫•n ƒë·ªÅ CORS t·ª´ ph√≠a BE n√™n t·∫°m ch∆∞a call api client. Ch·ªù fix xong
 */

"use client";

// import { Api } from "EduSmart/api/api-quiz-service";
import apiClient from "EduSmart/hooks/apiClient";

// ===== TYPES =====
export interface SemesterSelectResponse {
  semesterId: string;
  semesterName: string;
  semesterNumber?: number;
}

export interface MajorSelectResponse {
  majorId: string;
  majorName: string;
  majorCode: string;
  parentMajorId?: string;
}

export interface TechnologySelectResponse {
  technologyId: string;
  technologyName: string;
  technologyType: TechnologyType;
}

export interface LearningGoalSelectResponse {
  learningGoalId: string;
  learningGoalName: string;
  learningGoalType: number;
}

export interface SurveyListResponse {
  surveyId: string;
  title?: string;
  description: string;
  surveyCode: string;
}

export interface SurveyDetailResponse {
  surveyId: string;
  title?: string;
  description: string;
  surveyCode: string;
  questions: SurveyQuestion[];
}

export interface SurveyQuestion {
  questionId: string;
  questionText: string;
  questionType: number;
  answers: SurveyAnswer[];
}

export interface SurveyAnswer {
  answerId: string;
  answerText: string;
  isCorrect: boolean;
}

// Survey Submission Types (for client-side submission)
export interface ClientSurveySubmissionData {
  surveyId: string;
  surveyCode?: string;
  userAnswers: ClientSurveyUserAnswer[];
  completedAt?: string;
  timeSpent?: number; // in seconds
}

export interface ClientSurveyUserAnswer {
  questionId: string;
  answerId?: string; // For single/multiple choice
  answerIds?: string[]; // For multiple selections
  answerText?: string; // For free text answers
  answerValue?: number | boolean; // For numerical/boolean answers
}

export interface ClientSurveySubmissionResult {
  submissionId: string;
  surveyId: string;
  score?: number;
  maxScore?: number;
  percentage?: number;
  passStatus?: boolean;
  feedback?: string;
  recommendations?: ClientSurveyRecommendation[];
}

export interface ClientSurveyRecommendation {
  type: "course" | "skill" | "path" | "resource";
  title: string;
  description: string;
  priority: number;
  estimatedTime?: string;
  link?: string;
}

// API Response wrapper for client
export interface ClientApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

// ===== ENUMS =====
export enum TechnologyType {
  ProgrammingLanguage = 1,
  Framework = 2,
  Tool = 3,
  Platform = 4,
  Database = 5,
  Other = 6,
}

export enum QuestionType {
  MultipleChoice = 1,
  TrueFalse = 2,
  ShortAnswer = 3,
  SingleChoice = 4,
}

// ===== CLIENT API FUNCTIONS =====
// Nh·ªØng h√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª´ CLIENT SIDE ƒë·ªÉ l·∫•y d·ªØ li·ªáu form

/**
 * CLIENT API: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c h·ªçc k·ª≥
 */
export async function getSemesters(): Promise<SemesterSelectResponse[]> {
  try {
    console.log("Calling real API for semesters...");
    const response =
      await apiClient.quizService.api.v1ExternalQuizSelectSemestersList();

    console.log("Semesters API response:", response);

    if (response.data?.success && response.data?.response) {
      return response.data.response.map((item) => ({
        semesterId: item.semesterId!,
        semesterName: item.semesterName!,
        semesterNumber: item.semesterNumber!,
      }));
    }
    throw new Error(response.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch h·ªçc k·ª≥");
  } catch (error) {
    console.error("Error fetching semesters:", error);

    // Fallback to mock data if API fails
    console.log("Falling back to mock data for semesters");
    return [
      { semesterId: "sem1", semesterName: "K·ª≥ 1", semesterNumber: 1 },
      { semesterId: "sem2", semesterName: "K·ª≥ 2", semesterNumber: 2 },
      { semesterId: "sem3", semesterName: "K·ª≥ 3", semesterNumber: 3 },
      { semesterId: "sem4", semesterName: "K·ª≥ 4", semesterNumber: 4 },
      { semesterId: "sem5", semesterName: "K·ª≥ 5", semesterNumber: 5 },
      { semesterId: "sem6", semesterName: "K·ª≥ 6", semesterNumber: 6 },
      { semesterId: "sem7", semesterName: "K·ª≥ 7", semesterNumber: 7 },
      { semesterId: "sem8", semesterName: "K·ª≥ 8", semesterNumber: 8 },
    ];
  }
}

/**
 * CLIENT API: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c chuy√™n ng√†nh
 */
export async function getMajors(): Promise<MajorSelectResponse[]> {
  try {
    console.log("Calling real API for majors...");
    const response =
      await apiClient.quizService.api.v1ExternalQuizSelectMajorsList();

    console.log("Majors API response:", response);

    if (response.data?.success && response.data?.response) {
      return response.data.response.map((item) => ({
        majorId: item.majorId!,
        majorName: item.majorName!,
        majorCode: item.majorCode!,
        parentMajorId: item.parentMajorId || undefined,
      }));
    }
    throw new Error(
      response.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch chuy√™n ng√†nh",
    );
  } catch (error) {
    console.error("Error fetching majors:", error);

    // Fallback to mock data if API fails
    console.log("Falling back to mock data for majors");
    return [
      { majorId: "web-dev", majorName: "Ph√°t tri·ªÉn Web", majorCode: "WEB" },
      {
        majorId: "mobile-dev",
        majorName: "Ph√°t tri·ªÉn Mobile",
        majorCode: "MOB",
      },
      { majorId: "ai", majorName: "Tr√≠ tu·ªá nh√¢n t·∫°o", majorCode: "AI" },
      {
        majorId: "data-science",
        majorName: "Khoa h·ªçc d·ªØ li·ªáu",
        majorCode: "DS",
      },
      { majorId: "cybersec", majorName: "B·∫£o m·∫≠t th√¥ng tin", majorCode: "SEC" },
      { majorId: "devops", majorName: "DevOps", majorCode: "DEVOPS" },
      { majorId: "game-dev", majorName: "Ph√°t tri·ªÉn Game", majorCode: "GAME" },
    ];
  }
}

/**
 * CLIENT API: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c c√¥ng ngh·ªá (ng√¥n ng·ªØ l·∫≠p tr√¨nh, framework, etc.)
 */
export async function getTechnologies(): Promise<TechnologySelectResponse[]> {
  try {
    console.log("Calling real API for technologies...");
    const response =
      await apiClient.quizService.api.v1ExternalQuizSelectTechnologiesList();

    console.log("Technologies API response:", response);

    if (response.data?.success && response.data?.response) {
      return response.data.response.map((item) => ({
        technologyId: item.technologyId!,
        technologyName: item.technologyName!,
        technologyType: item.technologyType! as TechnologyType,
      }));
    }
    throw new Error(
      response.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch c√¥ng ngh·ªá",
    );
  } catch (error) {
    console.error("Error fetching technologies:", error);

    // Fallback to mock data if API fails
    console.log("Falling back to mock data for technologies");
    return [
      {
        technologyId: "js",
        technologyName: "JavaScript",
        technologyType: TechnologyType.ProgrammingLanguage,
      },
      {
        technologyId: "ts",
        technologyName: "TypeScript",
        technologyType: TechnologyType.ProgrammingLanguage,
      },
      {
        technologyId: "python",
        technologyName: "Python",
        technologyType: TechnologyType.ProgrammingLanguage,
      },
      {
        technologyId: "java",
        technologyName: "Java",
        technologyType: TechnologyType.ProgrammingLanguage,
      },
      {
        technologyId: "react",
        technologyName: "React",
        technologyType: TechnologyType.Framework,
      },
      {
        technologyId: "nodejs",
        technologyName: "Node.js",
        technologyType: TechnologyType.Framework,
      },
      {
        technologyId: "spring",
        technologyName: "Spring Boot",
        technologyType: TechnologyType.Framework,
      },
    ];
  }
}

/**
 * CLIENT API: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c m·ª•c ti√™u h·ªçc t·∫≠p
 */
export async function getLearningGoals(): Promise<
  LearningGoalSelectResponse[]
> {
  try {
    console.log("Calling real API for learning goals...");
    const response =
      await apiClient.quizService.api.v1ExternalQuizSelectLearningGoalsList();

    console.log("Learning goals API response:", response);

    if (response.data?.success && response.data?.response) {
      return response.data.response.map((item) => ({
        learningGoalId: item.learningGoalId!,
        learningGoalName: item.learningGoalName!,
        learningGoalType: item.learningGoalType!,
      }));
    }
    throw new Error(
      response.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch m·ª•c ti√™u h·ªçc t·∫≠p",
    );
  } catch (error) {
    console.error("Error fetching learning goals:", error);

    // Fallback to mock data if API fails
    console.log("Falling back to mock data for learning goals");
    return [
      {
        learningGoalId: "improve-programming",
        learningGoalName: "C·∫£i thi·ªán k·ªπ nƒÉng l·∫≠p tr√¨nh",
        learningGoalType: 1,
      },
      {
        learningGoalId: "prepare-internship",
        learningGoalName: "Chu·∫©n b·ªã cho th·ª±c t·∫≠p",
        learningGoalType: 2,
      },
      {
        learningGoalId: "prepare-job",
        learningGoalName: "Chu·∫©n b·ªã cho vi·ªác l√†m",
        learningGoalType: 3,
      },
      {
        learningGoalId: "personal-project",
        learningGoalName: "Ph√°t tri·ªÉn d·ª± √°n c√° nh√¢n",
        learningGoalType: 4,
      },
      {
        learningGoalId: "learn-new-tech",
        learningGoalName: "H·ªçc c√¥ng ngh·ªá m·ªõi",
        learningGoalType: 5,
      },
      {
        learningGoalId: "get-certification",
        learningGoalName: "ƒê·∫°t ch·ª©ng ch·ªâ",
        learningGoalType: 6,
      },
    ];
  }
}

/**
 * CLIENT API: L·∫•y danh s√°ch t·∫•t c·∫£ c√°c survey
 */
export async function getSurveyList(): Promise<SurveyListResponse[]> {
  try {
    console.log("üåê CLIENT API: Getting survey list");

    // Try actual API call first
    const response = await apiClient.quizService.api.v1SurveyList();

    if (response.data?.success && response.data?.response) {
      console.log("‚úÖ CLIENT API: Survey list loaded from API successfully");
      return response.data.response.map((item) => ({
        surveyId: item.surveyId!,
        title: item.title,
        description: item.description!,
        surveyCode: item.surveyCode!,
      }));
    }

    throw new Error(response.data?.message || "Failed to get survey list");
  } catch (error) {
    console.error("‚ùå CLIENT API - Get survey list error:", error);

    // Fallback to mock data if API fails
    console.log("üîÑ CLIENT API: Falling back to mock survey data");
    const mockSurveys: SurveyListResponse[] = [
      {
        surveyId: "f60a7c49-8fb3-417d-82b9-5d45c9e58374",
        title: "Kh·∫£o s√°t s·ªü th√≠ch h·ªçc t·∫≠p",
        description:
          "Kh·∫£o s√°t ƒë·ªÉ hi·ªÉu v·ªÅ s·ªü th√≠ch v√† xu h∆∞·ªõng h·ªçc t·∫≠p c·ªßa sinh vi√™n",
        surveyCode: "INTEREST",
      },
      {
        surveyId: "0cbf895e-005e-4bf7-82ed-627acdad0f39",
        title: "Kh·∫£o s√°t th√≥i quen h·ªçc t·∫≠p",
        description: "Kh·∫£o s√°t v·ªÅ th√≥i quen v√† ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªáu qu·∫£",
        surveyCode: "HABIT",
      },
    ];
    return mockSurveys;
  }
}

/**
 * CLIENT API: L·∫•y chi ti·∫øt m·ªôt survey theo ID
 */
export async function getSurveyDetail(
  surveyId: string,
  pageIndex = 0,
  pageSize = 50,
): Promise<SurveyDetailResponse> {
  try {
    console.log("Calling real API for survey detail...");
    const response = await apiClient.quizService.api.v1SurveyDetailList({
      SurveyId: surveyId,
      PageIndex: pageIndex,
      PageSize: pageSize,
    });

    console.log("Survey detail API response:", response);

    if (response.data?.success && response.data?.response?.items?.[0]) {
      const survey = response.data.response.items[0];
      return {
        surveyId: survey.surveyId!,
        title: survey.title || undefined,
        description: survey.description!,
        surveyCode: survey.surveyCode!,
        questions:
          survey.questions?.map((q) => ({
            questionId: q.questionId!,
            questionText: q.questionText!,
            questionType: q.questionType!,
            answers:
              q.answers?.map((a) => ({
                answerId: a.answerId!,
                answerText: a.answerText!,
                isCorrect: a.isCorrect!,
              })) || [],
          })) || [],
      };
    }
    throw new Error(response.data?.message || "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt survey");
  } catch (error) {
    console.error("Error fetching survey detail:", error);

    // Fallback to mock data if API fails
    console.log("Falling back to mock data for survey detail");
    const mockSurveys: Record<string, SurveyDetailResponse> = {
      "interest-survey": {
        surveyId: "interest-survey",
        title: "Kh·∫£o s√°t s·ªü th√≠ch",
        description: "Kh·∫£o s√°t ƒë·ªÉ t√¨m hi·ªÉu s·ªü th√≠ch c√¥ng ngh·ªá",
        surveyCode: "INTEREST",
        questions: [
          {
            questionId: "q1",
            questionText: "B·∫°n c√≥ th·ªÉ d√†nh bao nhi√™u gi·ªù h·ªçc m·ªói ng√†y?",
            questionType: 4,
            answers: [
              { answerId: "a1", answerText: "1-2 gi·ªù/ng√†y", isCorrect: false },
              { answerId: "a2", answerText: "3-4 gi·ªù/ng√†y", isCorrect: false },
              { answerId: "a3", answerText: "5-6 gi·ªù/ng√†y", isCorrect: false },
              {
                answerId: "a4",
                answerText: "Tr√™n 6 gi·ªù/ng√†y",
                isCorrect: false,
              },
            ],
          },
        ],
      },
    };

    return mockSurveys[surveyId] || mockSurveys["interest-survey"];
  }
}

/**
 * CLIENT API: L·∫•y chi ti·∫øt survey theo surveyCode (INTEREST, HABIT)
 */
export async function getSurveyByCode(
  surveyCode: string,
): Promise<SurveyDetailResponse> {
  try {
    // L·∫•y danh s√°ch survey tr∆∞·ªõc
    const surveyList = await getSurveyList();
    const survey = surveyList.find((s) => s.surveyCode === surveyCode);

    if (!survey) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y survey v·ªõi code: ${surveyCode}`);
    }

    // L·∫•y chi ti·∫øt survey
    return await getSurveyDetail(survey.surveyId);
  } catch (error) {
    console.error(`Error fetching survey by code ${surveyCode}:`, error);
    throw error;
  }
}

// ===============================
// CLIENT API: WRITE OPERATIONS
// ===============================

/**
 * CLIENT API: Submit survey (WRITE OPERATION - Use v·ªõi c·∫©n th·∫≠n)
 * ‚ö†Ô∏è WARNING: Client-side submission c√≥ th·ªÉ c√≥ security issues
 * üí° RECOMMENDATION: S·ª≠ d·ª•ng server actions cho production
 */
export async function submitSurveyClient(
  submissionData: ClientSurveySubmissionData,
): Promise<ClientApiResponse<ClientSurveySubmissionResult>> {
  try {
    console.warn(
      "‚ö†Ô∏è  CLIENT API: Submitting survey via browser (not recommended for production)",
    );

    // Transform data to API format
    const apiData = {
      surveyId: submissionData.surveyId,
      surveyCode: submissionData.surveyCode,
      answers: submissionData.userAnswers,
      completedAt: submissionData.completedAt || new Date().toISOString(),
      timeSpent: submissionData.timeSpent || 0,
    };

    console.log("CLIENT: Submitting survey data:", apiData);

    // Try actual API call first
    try {
      const response =
        await apiClient.quizService.api.v1StudentSurveyInsertStudentSurveyCreate(
          {
            studentInformation: {
              majorId: "default-major", // You may need to get this from context/auth
              semesterId: "default-semester",
              technologies: [],
              learningGoal: {
                learningGoalId: "default-goal",
                learningGoalType: 1,
              },
            },
            studentSurveys: [
              {
                surveyId: submissionData.surveyId,
                surveyCode: submissionData.surveyCode || "UNKNOWN",
                answers: submissionData.userAnswers.map((answer) => ({
                  questionId: answer.questionId,
                  answerId: answer.answerId || "",
                })),
              },
            ],
          },
        );

      if (response.data?.success) {
        const result: ClientSurveySubmissionResult = {
          submissionId: response.data.response || `client_sub_${Date.now()}`,
          surveyId: submissionData.surveyId,
          score: 85, // Default score
          maxScore: 100,
          percentage: 85,
          passStatus: true,
          feedback: "‚úÖ Survey ƒë√£ ƒë∆∞·ª£c submit th√†nh c√¥ng th√¥ng qua API!",
        };
        return { success: true, data: result };
      }

      throw new Error(response.data?.message || "API submission failed");
    } catch (apiError) {
      console.warn(
        "API submission failed, falling back to mock response:",
        apiError,
      );
    }

    // Fallback mock response when API fails
    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay

    const mockResult: ClientSurveySubmissionResult = {
      submissionId: `client_sub_${Date.now()}`,
      surveyId: submissionData.surveyId,
      score: Math.floor(Math.random() * 30) + 70, // Random score 70-100
      maxScore: 100,
      percentage: Math.floor(Math.random() * 30) + 70,
      passStatus: true,
      feedback:
        "‚úÖ Survey ƒë√£ ƒë∆∞·ª£c submit th√†nh c√¥ng th√¥ng qua Client API (fallback)!",
      recommendations: [
        {
          type: "course",
          title: "JavaScript Advanced",
          description: "Kh√≥a h·ªçc n√¢ng cao ph√π h·ª£p v·ªõi level hi·ªán t·∫°i",
          priority: 1,
          estimatedTime: "8 tu·∫ßn",
        },
        {
          type: "skill",
          title: "React Development",
          description: "K·ªπ nƒÉng frontend development",
          priority: 2,
          estimatedTime: "6 tu·∫ßn",
        },
      ],
    };

    return { success: true, data: mockResult };
  } catch (error) {
    console.error("CLIENT API - Submit survey error:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to submit survey",
    };
  }
}

/**
 * CLIENT API: Get survey results (READ OPERATION - Recommended for client)
 */
export async function getSurveyResults(
  submissionId: string,
): Promise<ClientApiResponse<ClientSurveySubmissionResult>> {
  try {
    console.log(
      `CLIENT API: Getting survey results for submission ${submissionId}`,
    );

    // This would be the actual API call
    // const response = await apiClient.quizService.api.v1ExternalQuizGetSurveyResults({ submissionId });

    // Mock response for now
    await new Promise((resolve) => setTimeout(resolve, 800));

    const mockResult: ClientSurveySubmissionResult = {
      submissionId,
      surveyId: "interest-survey",
      score: 85,
      maxScore: 100,
      percentage: 85,
      passStatus: true,
      feedback: "K·∫øt qu·∫£ kh·∫£o s√°t c·ªßa b·∫°n r·∫•t t·ªët!",
      recommendations: [
        {
          type: "course",
          title: "Advanced Programming",
          description: "Kh√≥a h·ªçc ph√π h·ª£p v·ªõi k·∫øt qu·∫£ kh·∫£o s√°t",
          priority: 1,
          estimatedTime: "10 tu·∫ßn",
        },
      ],
    };

    return { success: true, data: mockResult };
  } catch (error) {
    console.error("CLIENT API - Get survey results error:", error);
    return {
      success: false,
      error:
        error instanceof Error ? error.message : "Failed to get survey results",
    };
  }
}

/**
 * CLIENT API: Get user's survey history (READ OPERATION - Recommended for client)
 */
export async function getUserSurveyHistory(
  userId?: string,
): Promise<ClientApiResponse<ClientSurveySubmissionResult[]>> {
  try {
    console.log(
      `CLIENT API: Getting user survey history ${userId ? `for user ${userId}` : ""}`,
    );

    // This would be the actual API call
    // const response = await apiClient.quizService.api.v1ExternalQuizGetUserSurveyHistory({ userId });

    // Mock response for now
    await new Promise((resolve) => setTimeout(resolve, 600));

    const mockHistory: ClientSurveySubmissionResult[] = [
      {
        submissionId: "sub_001",
        surveyId: "interest-survey",
        score: 85,
        maxScore: 100,
        percentage: 85,
        passStatus: true,
        feedback: "Kh·∫£o s√°t s·ªü th√≠ch ho√†n th√†nh",
      },
      {
        submissionId: "sub_002",
        surveyId: "habit-survey",
        score: 78,
        maxScore: 100,
        percentage: 78,
        passStatus: true,
        feedback: "Kh·∫£o s√°t th√≥i quen h·ªçc t·∫≠p ho√†n th√†nh",
      },
    ];

    return { success: true, data: mockHistory };
  } catch (error) {
    console.error("CLIENT API - Get user survey history error:", error);
    return {
      success: false,
      error:
        error instanceof Error ? error.message : "Failed to get survey history",
    };
  }
}
