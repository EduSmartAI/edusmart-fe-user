"use client";

import React, { useState } from "react";
import { Card, Tag, Row, Col, Progress, Collapse, Timeline, Statistic, Divider } from "antd";
import { 
  FiPlay,
  FiClock,
  FiCheckCircle,
  FiPause,
  FiRotateCcw,
  FiEye,
  FiSkipForward,
  FiMessageCircle,
  FiEdit3,
  FiHelpCircle,
  FiTrendingUp,
  FiTrendingDown,
  FiCpu,
  FiAlertTriangle,
  FiTarget,
  FiActivity,
  FiBarChart2,
  FiCalendar,
  FiLayers
} from "react-icons/fi";

const { Panel } = Collapse;

interface VideoPerformanceProps {
  courseId: string;
}

// Mock data cho video performance
const mockVideoData = [
  {
    id: "video-1",
    title: "Introduction to React Components",
    module: "Module 1: React Fundamentals",
    duration: "12:45",
    status: "Ho√†n th√†nh",
    statusIcon: "‚úÖ",
    replayCount: 3,
    lastViewed: "2024-10-08",
    behaviorMetrics: {
      midVideoQuizScore: 8.5,
      rewatchCount: 2,
      pauseCount: 15,
      seekCount: 8,
      difficultSegments: [
        { start: "02:30", end: "04:10", reason: "Component Props concept", pauseCount: 8, seekCount: 4 },
        { start: "08:15", end: "09:30", reason: "JSX Syntax rules", pauseCount: 5, seekCount: 3 }
      ],
      interactionLevel: {
        notes: 5,
        comments: 2,
        questions: 1
      }
    },
    aiAssessment: {
      overallComment: "B·∫°n c√≥ xu h∆∞·ªõng xem l·∫°i nhi·ªÅu ph·∫ßn li√™n quan ƒë·∫øn Component Props ‚Üí C√≥ th·ªÉ ƒë√¢y l√† m·∫£ng b·∫°n ch∆∞a n·∫Øm v·ªØng. Tuy nhi√™n, b·∫°n ho√†n th√†nh video v·ªõi hi·ªáu su·∫•t t·ªët.",
      strengths: [
        {
          point: "T∆∞∆°ng t√°c t√≠ch c·ª±c",
          detail: "Ghi ch√∫ nhi·ªÅu v√† ƒë·∫∑t c√¢u h·ªèi cho th·∫•y s·ª± ch·ªß ƒë·ªông trong h·ªçc t·∫≠p"
        }
      ],
      improvements: [
        {
          point: "Component Props",
          detail: "Xem l·∫°i t√†i li·ªáu v·ªÅ Props v√† l√†m b√†i t·∫≠p th·ª±c h√†nh th√™m"
        }
      ],
      suggestions: [
        "Th·ª±c h√†nh t·∫°o components v·ªõi nhi·ªÅu props kh√°c nhau",
        "Xem video b·ªï sung v·ªÅ Props validation"
      ]
    }
  },
  {
    id: "video-2", 
    title: "State Management with useState",
    module: "Module 2: State Management & Hooks",
    duration: "18:20",
    status: "D·ªü dang",
    statusIcon: "‚è∏",
    replayCount: 1,
    lastViewed: "2024-10-09",
    behaviorMetrics: {
      midVideoQuizScore: 6.0,
      rewatchCount: 4,
      pauseCount: 22,
      seekCount: 12,
      difficultSegments: [
        { start: "05:45", end: "08:30", reason: "State updates and re-renders", pauseCount: 12, seekCount: 7 },
        { start: "12:10", end: "15:45", reason: "Functional updates", pauseCount: 8, seekCount: 4 }
      ],
      interactionLevel: {
        notes: 8,
        comments: 0,
        questions: 3
      }
    },
    aiAssessment: {
      overallComment: "Video ch∆∞a ho√†n th√†nh v√† c√≥ nhi·ªÅu kh√≥ khƒÉn ·ªü ph·∫ßn State updates. B·∫°n c·∫ßn d√†nh th·ªùi gian t·∫≠p trung h∆°n cho ph·∫ßn n√†y.",
      strengths: [
        {
          point: "Ghi ch√∫ chi ti·∫øt",
          detail: "B·∫°n ghi ch√∫ r·∫•t nhi·ªÅu, cho th·∫•y s·ª± c·∫©n th·∫≠n trong vi·ªác h·ªçc"
        }
      ],
      improvements: [
        {
          point: "State Management Logic",
          detail: "C·∫ßn hi·ªÉu r√µ h∆°n v·ªÅ c√°ch React re-render khi state thay ƒë·ªïi"
        }
      ],
      suggestions: [
        "Ho√†n th√†nh video v√† l√†m quiz ƒë·ªÉ ki·ªÉm tra hi·ªÉu bi·∫øt",
        "Th·ª±c h√†nh v·ªõi useState trong c√°c v√≠ d·ª• ƒë∆°n gi·∫£n tr∆∞·ªõc",
        "Xem th√™m video v·ªÅ React rendering cycle"
      ]
    }
  },
  {
    id: "video-3",
    title: "Advanced useEffect Patterns",
    module: "Module 3: Advanced Patterns & Performance", 
    duration: "25:15",
    status: "Xem l·∫°i",
    statusIcon: "üîÅ",
    replayCount: 5,
    lastViewed: "2024-10-07",
    behaviorMetrics: {
      midVideoQuizScore: 7.8,
      rewatchCount: 5,
      pauseCount: 35,
      seekCount: 18,
      difficultSegments: [
        { start: "08:20", end: "12:45", reason: "Dependency array rules", pauseCount: 15, seekCount: 9 },
        { start: "18:30", end: "22:10", reason: "Cleanup functions", pauseCount: 12, seekCount: 6 }
      ],
      interactionLevel: {
        notes: 12,
        comments: 1,
        questions: 4
      }
    },
    aiAssessment: {
      overallComment: "B·∫°n xem l·∫°i video n√†y r·∫•t nhi·ªÅu l·∫ßn, cho th·∫•y n·ªôi dung kh√° ph·ª©c t·∫°p v·ªõi b·∫°n. Tuy nhi√™n, s·ª± ki√™n tr√¨ n√†y s·∫Ω gi√∫p b·∫°n n·∫Øm v·ªØng ki·∫øn th·ª©c.",
      strengths: [
        {
          point: "S·ª± ki√™n tr√¨",
          detail: "Xem l·∫°i nhi·ªÅu l·∫ßn cho th·∫•y quy·∫øt t√¢m h·ªçc t·∫≠p cao"
        }
      ],
      improvements: [
        {
          point: "useEffect Dependencies",
          detail: "C·∫ßn hi·ªÉu r√µ h∆°n v·ªÅ dependency array v√† khi n√†o c·∫ßn cleanup"
        }
      ],
      suggestions: [
        "Chia nh·ªè video th√†nh c√°c ph·∫ßn v√† h·ªçc t·ª´ng ph·∫ßn m·ªôt",
        "Th·ª±c h√†nh v·ªõi c√°c v√≠ d·ª• useEffect ƒë∆°n gi·∫£n tr∆∞·ªõc",
        "Tham gia discussion forum ƒë·ªÉ h·ªèi ƒë√°p"
      ]
    }
  }
];

const getStatusColor = (status: string) => {
  switch (status) {
    case "Ho√†n th√†nh": return "success";
    case "D·ªü dang": return "warning"; 
    case "Xem l·∫°i": return "processing";
    default: return "default";
  }
};

const VideoPerformance: React.FC<VideoPerformanceProps> = ({ courseId }) => {
  const [selectedModule, setSelectedModule] = useState<string>("all");

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          Hi·ªáu su·∫•t v√† ƒê√°nh gi√° theo Video
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          Ph√¢n t√≠ch h√†nh vi h·ªçc t·∫≠p v√† hi·ªáu su·∫•t chi ti·∫øt c·ªßa t·ª´ng video trong kh√≥a h·ªçc
        </p>
      </div>

      {/* Videos List - Linear Layout */}
      <div className="flex flex-col gap-6">
        {mockVideoData.map((video, index) => (
          <Card 
            key={video.id}
            className="border-0 shadow-sm"
          >
            {/* Video Header */}
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-5 rounded-xl shadow-lg mb-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center">
                    <FiPlay className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white mb-1">
                      {video.title}
                    </h3>
                    <div className="flex items-center space-x-2 text-sm text-blue-100 mb-1">
                      <FiLayers className="w-4 h-4" />
                      <span>{video.module}</span>
                    </div>
                    <div className="flex items-center space-x-4 text-sm text-blue-100">
                      <span className="flex items-center space-x-1">
                        <FiClock className="w-4 h-4" />
                        <span>{video.duration}</span>
                      </span>
                      <span className="flex items-center space-x-1">
                        <FiEye className="w-4 h-4" />
                        <span>{video.replayCount} l·∫ßn xem</span>
                      </span>
                      <span className="flex items-center space-x-1">
                        <FiCalendar className="w-4 h-4" />
                        <span>Xem cu·ªëi: {new Date(video.lastViewed).toLocaleDateString('vi-VN')}</span>
                      </span>
                    </div>
                  </div>
                </div>
                <div className="bg-white/20 px-3 py-2 rounded-lg">
                  <span className="text-white font-medium text-sm">
                    {video.statusIcon} {video.status}
                  </span>
                </div>
              </div>
            </div>

            {/* Learning Behavior - Compact */}
            <div className="mb-6">
              <h4 className="text-base font-semibold text-slate-900 dark:text-slate-100 mb-4">
                H√†nh vi h·ªçc t·∫≠p
              </h4>
              
              {/* Key Metrics Grid */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                <div className="text-center p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
                  <div className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-1">
                    {video.behaviorMetrics.midVideoQuizScore}
                  </div>
                  <div className="text-xs text-slate-500 dark:text-slate-400 mb-1">/10</div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">ƒêi·ªÉm quiz</div>
                </div>
                <div className="text-center p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
                  <div className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-1">
                    {video.behaviorMetrics.rewatchCount}
                  </div>
                  <div className="text-xs text-slate-500 dark:text-slate-400 mb-1">l·∫ßn</div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">Xem l·∫°i</div>
                </div>
                <div className="text-center p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
                  <div className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-1">
                    {video.behaviorMetrics.pauseCount}
                  </div>
                  <div className="text-xs text-slate-500 dark:text-slate-400 mb-1">l·∫ßn</div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">D·ª´ng video</div>
                </div>
                <div className="text-center p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
                  <div className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-1">
                    {video.behaviorMetrics.seekCount}
                  </div>
                  <div className="text-xs text-slate-500 dark:text-slate-400 mb-1">l·∫ßn</div>
                  <div className="text-xs text-slate-600 dark:text-slate-400">Tua video</div>
                </div>
              </div>

              {/* Interaction Summary */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4">
                <div className="flex items-center justify-between p-3 bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700">
                  <span className="text-sm text-slate-600 dark:text-slate-400">Ghi ch√∫</span>
                  <span className="font-medium text-slate-900 dark:text-slate-100">{video.behaviorMetrics.interactionLevel.notes}</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700">
                  <span className="text-sm text-slate-600 dark:text-slate-400">B√¨nh lu·∫≠n</span>
                  <span className="font-medium text-slate-900 dark:text-slate-100">{video.behaviorMetrics.interactionLevel.comments}</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700">
                  <span className="text-sm text-slate-600 dark:text-slate-400">C√¢u h·ªèi</span>
                  <span className="font-medium text-slate-900 dark:text-slate-100">{video.behaviorMetrics.interactionLevel.questions}</span>
                </div>
              </div>

              {/* Difficult Segments */}
              {video.behaviorMetrics.difficultSegments.length > 0 && (
                <div className="bg-amber-50 dark:bg-amber-900/20 p-4 rounded-lg border border-amber-200 dark:border-amber-700">
                  <div className="flex items-center space-x-2 mb-3">
                    <FiAlertTriangle className="w-4 h-4 text-amber-600" />
                    <span className="text-sm font-medium text-amber-800 dark:text-amber-400">
                      Ph·∫ßn h·ªçc kh√≥ ({video.behaviorMetrics.difficultSegments.length} v·ªã tr√≠)
                    </span>
                  </div>
                  <div className="space-y-2">
                    {video.behaviorMetrics.difficultSegments.map((segment, idx) => (
                      <div key={idx} className="bg-white dark:bg-slate-900 p-3 rounded-lg border border-amber-200 dark:border-amber-700">
                        <div className="flex items-center justify-between mb-1">
                          <span className="font-medium text-amber-800 dark:text-amber-400 text-sm">
                            {segment.start} - {segment.end}
                          </span>
                          <div className="text-xs text-amber-600 dark:text-amber-400">
                            {segment.pauseCount} d·ª´ng, {segment.seekCount} tua
                          </div>
                        </div>
                        <p className="text-xs text-slate-700 dark:text-slate-300">
                          {segment.reason}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* AI Assessment */}
            <div className="bg-slate-50 dark:bg-slate-800 p-5 rounded-lg border border-slate-200 dark:border-slate-700">
              <h4 className="text-base font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center space-x-2">
                <FiCpu className="w-5 h-5 text-slate-600 dark:text-slate-400" />
                <span>Nh·∫≠n ƒë·ªãnh c·ªßa AI</span>
              </h4>

              {/* Overall Comment */}
              <div className="mb-4">
                <p className="text-sm text-slate-700 dark:text-slate-300 leading-relaxed">
                  {video.aiAssessment.overallComment}
                </p>
              </div>

              {/* Skills Summary */}
              <div className="space-y-4">
                {video.aiAssessment.strengths.length > 0 && (
                  <div className="border-l-3 border-emerald-500 pl-4 bg-white dark:bg-slate-900 p-3 rounded-r-lg">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiTrendingUp className="w-4 h-4 text-emerald-600" />
                      <span className="text-sm font-medium text-emerald-700 dark:text-emerald-400">
                        ƒêi·ªÉm n·ªïi b·∫≠t
                      </span>
                    </div>
                    {video.aiAssessment.strengths.map((strength, idx) => (
                      <div key={idx} className="text-sm text-slate-700 dark:text-slate-300 mb-2">
                        <strong className="text-slate-900 dark:text-slate-100">{strength.point}:</strong> {strength.detail}
                      </div>
                    ))}
                  </div>
                )}

                {video.aiAssessment.improvements.length > 0 && (
                  <div className="border-l-3 border-amber-500 pl-4 bg-white dark:bg-slate-900 p-3 rounded-r-lg">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiTrendingDown className="w-4 h-4 text-amber-600" />
                      <span className="text-sm font-medium text-amber-700 dark:text-amber-400">
                        C·∫ßn c·∫£i thi·ªán
                      </span>
                    </div>
                    {video.aiAssessment.improvements.map((improvement, idx) => (
                      <div key={idx} className="text-sm text-slate-700 dark:text-slate-300 mb-2">
                        <strong className="text-slate-900 dark:text-slate-100">{improvement.point}:</strong> {improvement.detail}
                      </div>
                    ))}
                  </div>
                )}

                {video.aiAssessment.suggestions.length > 0 && (
                  <div className="border-l-3 border-blue-500 pl-4 bg-white dark:bg-slate-900 p-3 rounded-r-lg">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiTarget className="w-4 h-4 text-blue-600" />
                      <span className="text-sm font-medium text-blue-700 dark:text-blue-400">
                        ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
                      </span>
                    </div>
                    <div className="space-y-2">
                      {video.aiAssessment.suggestions.map((suggestion, idx) => (
                        <div key={idx} className="text-sm text-slate-700 dark:text-slate-300">
                          ‚Ä¢ {suggestion}
                        </div>
                      ))}
                      <div className="mt-3 pt-2 border-t border-slate-200 dark:border-slate-600">
                        <a 
                          href="#" 
                          className="inline-flex items-center space-x-1 text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
                        >
                          <span>üìñ T√†i li·ªáu ƒë·ªçc th√™m</span>
                        </a>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default VideoPerformance;
